import java.io.File;

public class FileDiagnostic {

    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏");
            System.out.println("–ü—Ä–∏–º–µ—Ä: java FileDiagnostic F:\\java_projects\\access");
            return;
        }

        String filePath = args[0];
        diagnoseFile(filePath);
    }

    public static void diagnoseFile(String filePath) {
        System.out.println("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ê–ô–õ–ê");
        System.out.println("====================");

        File file = new File(filePath);

        System.out.println("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");
        System.out.println("   –ü—É—Ç—å: " + filePath);
        System.out.println("   –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: " + file.getAbsolutePath());
        System.out.println("   –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: " + getCanonicalPathSafe(file));

        System.out.println("\nüìä –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞:");
        System.out.println("   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: " + (file.exists() ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢"));
        System.out.println("   –≠—Ç–æ —Ñ–∞–π–ª: " + (file.isFile() ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢"));
        System.out.println("   –≠—Ç–æ –ø–∞–ø–∫–∞: " + (file.isDirectory() ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢"));
        System.out.println("   –°–∫—Ä—ã—Ç—ã–π: " + (file.isHidden() ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢"));

        System.out.println("\nüîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:");
        System.out.println("   –ú–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å: " + (file.canRead() ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢"));
        System.out.println("   –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å: " + (file.canWrite() ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢"));
        System.out.println("   –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å: " + (file.canExecute() ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢"));

        System.out.println("\nüìè –†–∞–∑–º–µ—Ä—ã:");
        if (file.exists()) {
            System.out.println("   –†–∞–∑–º–µ—Ä: " + formatFileSize(file.length()));
            System.out.println("   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + new java.util.Date(file.lastModified()));
        }

        System.out.println("\nüìÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ:");
        if (file.isDirectory()) {
            System.out.println("   –≠—Ç–æ –ø–∞–ø–∫–∞, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:");
            String[] files = file.list();
            if (files != null && files.length > 0) {
                for (int i = 0; i < Math.min(10, files.length); i++) {
                    System.out.println("      - " + files[i]);
                }
                if (files.length > 10) {
                    System.out.println("      ... –∏ –µ—â–µ " + (files.length - 10) + " —Ñ–∞–π–ª–æ–≤");
                }
            } else {
                System.out.println("      –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞");
            }
        }

        System.out.println("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
        if (!file.exists()) {
            System.out.println("   ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.");
        } else if (!file.isFile()) {
            System.out.println("   ‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø–∞–ø–∫–∞.");
        } else if (!file.canRead()) {
            System.out.println("   ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞.");
            System.out.println("   üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:");
            System.out.println("      1. –ó–∞–ø—É—Å—Ç–∏—Ç—å IDE –æ—Ç –∏–º–µ–Ω–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
            System.out.println("      2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É");
            System.out.println("      3. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É");
        } else {
            System.out.println("   ‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è!");
        }
    }

    private static String getCanonicalPathSafe(File file) {
        try {
            return file.getCanonicalPath();
        } catch (Exception e) {
            return "–û—à–∏–±–∫–∞: " + e.getMessage();
        }
    }

    private static String formatFileSize(long bytes) {
        if (bytes < 1024) return bytes + " –±–∞–π—Ç";
        if (bytes < 1024 * 1024) return (bytes / 1024) + " KB";
        if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)) + " MB";
        return (bytes / (1024 * 1024 * 1024)) + " GB";
    }
}