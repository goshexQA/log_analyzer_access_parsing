import service.LogParser;
import service.StatisticsCalculator;
import model.LogEntry;
import java.util.List;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤");
        System.out.println("=================================");

        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É: ");
            String filePath = scanner.nextLine().trim();

            if (filePath.isEmpty()) {
                System.out.println("‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
                return;
            }

            System.out.println("\n‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞...");
            System.out.println("–§–∞–π–ª –±–æ–ª—å—à–æ–π (36.7 –ú–ë), —ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è...");
            System.out.println("–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ Ctrl+C");

            long startTime = System.currentTimeMillis();

            // –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            LogParser parser = new LogParser();
            List<LogEntry> logEntries = parser.parseLogFile(filePath);

            long parseTime = System.currentTimeMillis() - startTime;

            if (logEntries == null || logEntries.isEmpty()) {
                System.out.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª");
                return;
            }

            System.out.printf("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ %,d –º—Å%n", parseTime);
            System.out.printf("üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: %,d%n", logEntries.size());

            // –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            System.out.println("\nüìà –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
            showQuickStats(logEntries);

            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            System.out.print("\nüîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏? (y/n): ");
            String choice = scanner.nextLine().trim().toLowerCase();

            if (choice.equals("y") || choice.equals("yes")) {
                System.out.println("\n‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑...");
                StatisticsCalculator calculator = new StatisticsCalculator();
                calculator.calculateStatistics(logEntries);
            }

        } catch (Exception e) {
            System.err.println("üí• –û—à–∏–±–∫–∞: " + e.getMessage());
        } finally {
            scanner.close();
            System.out.println("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
    }

    // –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ Stream API
    private static void showQuickStats(List<LogEntry> entries) {
        int total = entries.size();
        System.out.printf("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %,d%n", total);

        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç –∫–æ–¥–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        int success = 0, errors = 0;
        for (LogEntry entry : entries) {
            int code = entry.getResponseCode();
            if (code >= 200 && code < 300) success++;
            if (code >= 400) errors++;
        }

        System.out.printf("–£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: %,d (%.1f%%)%n",
                success, (success * 100.0 / total));
        System.out.printf("–û—à–∏–±–∫–∏: %,d (%.1f%%)%n",
                errors, (errors * 100.0 / total));
    }
}