package service;

import model.LogEntry;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LogParser {

    private static final String LOG_PATTERN =
            "^([\\d.]+) \\- \\- \\[([^\\]]+)\\] \"([A-Z]+) ([^\"]+?) HTTP/[\\d.]+\" (\\d{3}) (\\d+) \"([^\"]*)\" \"([^\"]*)\"";

    private static final Pattern PATTERN = Pattern.compile(LOG_PATTERN);
    private static final DateTimeFormatter DATE_FORMATTER =
            DateTimeFormatter.ofPattern("dd/MMM/yyyy:HH:mm:ss Z", Locale.ENGLISH);

    public List<LogEntry> parseLogFile(String filePath) {
        List<LogEntry> entries = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath), 65536)) { // 64KB buffer {
            String line;
            int lineCount = 0;

            while ((line = reader.readLine()) != null) {
                lineCount++;

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ä–∞–∑—É
                if (line.trim().isEmpty()) {
                    continue;
                }

                LogEntry entry = parseLine(line);
                if (entry != null) {
                    entries.add(entry);
                }

                // –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10,000 —Å—Ç—Ä–æ–∫
                if (lineCount % 10000 == 0) {
                    System.out.printf("‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: %,d%n", lineCount);
                }
            }

            System.out.printf("‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: %,d%n", lineCount);
            System.out.printf("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: %,d%n", entries.size());

        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + e.getMessage());
        }

        return entries;
    }

    private LogEntry parseLine(String line) {
        System.out.println("=== –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê ===");
        System.out.println("–°—Ç—Ä–æ–∫–∞: " + line);

        Matcher matcher = PATTERN.matcher(line);

        if (matcher.find()) {
            System.out.println("‚úÖ Regex —Å–æ–≤–ø–∞–ª! –ì—Ä—É–ø–ø –Ω–∞–π–¥–µ–Ω–æ: " + matcher.groupCount());

            try {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                for (int i = 1; i <= matcher.groupCount(); i++) {
                    System.out.println("–ì—Ä—É–ø–ø–∞ " + i + ": '" + matcher.group(i) + "'");
                }

                String ipAddress = matcher.group(1);
                String dateTimeStr = matcher.group(2);
                String method = matcher.group(3);
                String path = matcher.group(4);
                int responseCode = Integer.parseInt(matcher.group(5));
                long bytesSent = Long.parseLong(matcher.group(6));
                String referer = matcher.group(7);
                String userAgent = matcher.group(8);

                System.out.println("üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
                System.out.println("IP: " + ipAddress);
                System.out.println("DateTime: " + dateTimeStr);
                System.out.println("Method: " + method);
                System.out.println("Path: " + path);
                System.out.println("Response: " + responseCode);
                System.out.println("Bytes: " + bytesSent);
                System.out.println("Referer: " + referer);
                System.out.println("UserAgent: " + userAgent);

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                LocalDateTime timestamp;
                try {
                    timestamp = LocalDateTime.parse(dateTimeStr, DATE_FORMATTER);
                    System.out.println("‚úÖ –î–∞—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞: " + timestamp);
                } catch (Exception e) {
                    System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: " + e.getMessage());
                    System.err.println("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç...");

                    // –ü—Ä–æ–±—É–µ–º —É–±—Ä–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if (dateTimeStr.startsWith("[") && dateTimeStr.endsWith("]")) {
                        dateTimeStr = dateTimeStr.substring(1, dateTimeStr.length() - 1);
                    }

                    // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
                    try {
                        DateTimeFormatter altFormatter = DateTimeFormatter.ofPattern("dd/MMM/yyyy:HH:mm:ss Z");
                        timestamp = LocalDateTime.parse(dateTimeStr, altFormatter);
                        System.out.println("‚úÖ –î–∞—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º: " + timestamp);
                    } catch (Exception e2) {
                        System.err.println("‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: " + e2.getMessage());
                        return null;
                    }
                }

                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç LogEntry
                LogEntry entry = new LogEntry(ipAddress, timestamp, method, path,
                        responseCode, bytesSent, referer, userAgent);

                System.out.println("‚úÖ –û–±—ä–µ–∫—Ç LogEntry —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
                System.out.println("=== –ö–û–ù–ï–¶ –ü–ê–†–°–ò–ù–ì–ê ===");
                return entry;

            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
                e.printStackTrace();
                return null;
            }
        } else {
            System.err.println("‚ùå Regex –Ω–µ —Å–æ–≤–ø–∞–ª —Å–æ —Å—Ç—Ä–æ–∫–æ–π");
            System.err.println("–ü—Ä–æ–≤–µ—Ä—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: " + LOG_PATTERN);
            return null;
        }
    }

    public static void main(String[] args) {
          LogParser parser = new LogParser();

        String testLine = "37.231.123.209 - - [25/Sep/2022:06:25:04 +0300] \"GET /engine.php?rss=1&json=1&p=156&lg=1 HTTP/1.0\" 200 61096 \"https://nova-news.ru/search/?rss=1&lg=1\" \"Mozilla/5.0 (Linux; Android 6.0.1; SM-J500M Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.91 Mobile Safari/537.36\"";

        System.out.println("üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ü–ê–†–°–ò–ù–ì");
        LogEntry entry = parser.parseLine(testLine);

        if (entry != null) {
            System.out.println("üéâ –£–°–ü–ï–•! –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:");
            System.out.println("IP: " + entry.getIpAddress());
            System.out.println("Time: " + entry.getTimestamp());
            System.out.println("Method: " + entry.getMethod());
        } else {
            System.out.println("üí• –ü–ê–†–°–ò–ù–ì –ü–†–û–í–ê–õ–ò–õ–°–Ø");
        }
    }
}
